#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'optparse'
require 'yaml'
require 'calcexam'
require 'readline'

EXIT_COMMANDS = ['exit', 'quit']

options = {
  operation: :*,
  limit: 10,
  shuffle: true,
  x: (11..20).to_a,
  y: (11..20).to_a,
}
OPERATIONS = {
  multiplication: :*, multiply: :*, mult: :*, x: :*, :* => :*,
  plus: :+, sum: :+, :+ => :+,
  minus: :-, diff: :-, difference: :-, :- => :-
}

CONFIG_FILE = File.join(ENV['HOME'], '.calcexam.rc.yaml')
if File.exists? CONFIG_FILE
  config_options = YAML.load_file(CONFIG_FILE)
  options.merge!(config_options)
else
  begin
    File.open(CONFIG_FILE, 'w') { |file| YAML::dump(options, file) }
    STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
  rescue Errno::EACCES => ex
    #STDERR.puts "Cannot create config file. #{ex.message}"
  end
end

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = <<EOF
Simple training application. Increasing your arithmetical ability by passing small exam.

Usage: #{executable_name} [options] x1..xN y1..yM
       #{executable_name} [options] x1,x2,x3 y1,y2
       #{executable_name} [options] x1..xN y1   

EOF

  opts.on("-o OPERATION", "--operation", OPERATIONS, "Set prefered operation. Allowed: mult (multiply, multiplication), plus (sum), minus") do |operation|
    options[:operation] = operation
  end

  opts.on("-l LIMIT", "--[no-]limit", 'Limit of iterations. Use prefix "no-" for passing all n*m iterations', Integer) do |limit|
    options[:limit] = limit
  end

  opts.on("--no-shuffle", "--no-s", "Don't shuffle pairs (Passing iterations in order increase consistent numbers)") do
    options[:shuffle] = false
  end

  opts.on("--no-color", "--no-c", "Don't use colors") do
    options[:'no-color'] = true
  end
end

begin
  option_parser.parse!
  Sickill::Rainbow.enabled = false  if options[:'no-color']
rescue OptionParser::InvalidArgument => ex
  STDERR.puts ex.message
  STDERR.puts option_parser
  exit 1
end

options[:x] = ARGV[0]  if ARGV[0]
options[:y] = ARGV[1]  if ARGV[1]
#puts options.inspect

# The exam began, silence...
exam = Calcexam::Exam.new

# Allows simple invocation
if m = /(\d+)\s*(\*|\+|-)\s*(\d+)\s*=\s*(\d+)/.match(ARGV.join)
  m[1].to_i.send(m[2], m[3].to_i) == m[4].to_i ? exam.right_answer! : exam.wrong_answer!
  exit 0
end

matrix = Calcexam::Matrix.new(options[:operation], options[:x], options[:y])
matrix.shuffle!  if options[:shuffle]
matrix.each do |a, b|
  command = Readline.readline("#{a} #{matrix.operation} #{b} =  ", true)
  exit(2)  if command.nil? or EXIT_COMMANDS.include?(command)
  number = command.to_i
  if a.send(matrix.operation, b) == number
    exam.right_answer!
  else
    exam.try_again
    command = Readline.readline("#{a} #{matrix.operation} #{b} =  ", true)
    exit(2)  if command.nil? or EXIT_COMMANDS.include?(command)
    number = command.to_i
    if a.send(matrix.operation, b) == number
      exam.right_answer!
    else
      exam.wrong_answer!
    end
  end
  break  if exam.answers_count >= options[:limit]
end
exam.results
